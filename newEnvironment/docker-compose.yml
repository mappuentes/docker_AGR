version: '3'
services:
  #to add a new router copy and paste this configuration. Define its ip address and assign a network consistenlty with the architecture required
  
  professor-fluentd:
    build: 
      context: ./professor-fluentd
      dockerfile: Dockerfile_professor-fluentd
    privileged: true
    #the container as first instruction executes the entrypoint (since the image doesn't support bash it's used sh)
    entrypoint: sh -c "/ep_fluentd.sh"
    #shared-volumes between fluentd and the host
    volumes:
      - ./professor-fluentd/conf/fluent.conf:/fluentd/etc/fluent.conf 
      - ./professor-fluentd/shared-volume:/shared-volume
      - ./professor-fluentd/output:/fluentd/output/
    #hostPort:containerPort
    #indicates a connection between these 2 ports
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      - "5140/tcp"
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      professor-system1:
        ipv4_address: 10.200.0.2
  
  servidor:
    build: 
      context: ./servidor
      dockerfile: Dockerfile_servidor
    #iniciar servidor web
    entrypoint: entrypoints/ep_servidor.sh
    cap_add:
      - NET_ADMIN
    #privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./professor-fluentd/shared-volume:/shared-volume
    depends_on:
      - professor-fluentd
    ports:
      - "3001:3001"
    #links establishes a link to the fluentd service enabling communication with that container
    #Started after fluentd (that should collect all the logs)
    links:
      - professor-fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.200.0.2:24224
        tag: servidor
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      servidor-system1:
        ipv4_address: 10.100.0.2
      
  ra_router:
    hostname: RArouter
    build: 
      context: ./router
      dockerfile: Dockerfile_router_A
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_routerA.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - professor-fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - professor-fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.200.0.2:24224
        tag: routerA
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      servidor-system1:
        ipv4_address: 10.100.0.10
      professor-system1:
        ipv4_address: 10.200.0.10
      RA-RB1:
        ipv4_address: 10.1.0.10

  rb_router:
    hostname: RBrouter
    build: 
      context: ./router
      dockerfile: Dockerfile_router_B
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_routerB.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - professor-fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - professor-fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.200.0.2:24224
        tag: routerB
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      RA-RB1:
        ipv4_address: 10.1.0.20
      RB-RC_left1:
        ipv4_address: 10.2.0.10
      RB-RD_right1:
        ipv4_address: 10.3.0.10

  rc_router:
    hostname: RCrouter
    build: 
      context: ./router
      dockerfile: Dockerfile_router_C
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_routerC.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - professor-fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - professor-fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.200.0.2:24224
        tag: routerC
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      RB-RC_left1:
        ipv4_address: 10.2.0.20
      RCnet_left1:
        ipv4_address: 10.0.1.10
      RCnet_right1:
        ipv4_address: 10.0.2.10
      

  rd_router:
    hostname: RDrouter
    build: 
      context: ./router
      dockerfile: Dockerfile_router_D
    #the container as first instruction executes the entrypoint
    entrypoint: entrypoints/ep_routerD.sh
    #set the network and system priviledges high to make it possible to add static route and set the flag for forwarding to 1. Done for all the containers in this primal phase.
    cap_add:
      - NET_ADMIN
    privileged: true
    #shared-volumes between fluentd and the host
    volumes:
      - ./fluentd/shared-volume:/shared-volume
    #Started after fluentd (that should collect all the logs)
    depends_on:
      - professor-fluentd
    #links establishes a link to the fluentd service enabling communication with that container
    links:
      - professor-fluentd
    #set as logging driver fluentd (to check if it's actually needed)
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 10.200.0.2:24224
        tag: routerD
        #makes the execution non-blocking
        fluentd-async: 'true'
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"
    networks:
      RB-RD_right1:
        ipv4_address: 10.3.0.20
      RDnet_left1:
        ipv4_address: 10.0.3.10
      RDnet_right1:
        ipv4_address: 10.0.4.10


  red1:
    build: 
      context: ./client
      dockerfile: Dockerfile_client
    entrypoint: entrypoints/ep_red1.sh
    #privedges for network needed to add a new ip route
    cap_add:
      - NET_ADMIN
    depends_on:
      - rc_router
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      RCnet_left1:
        ipv4_address: 10.0.1.20
  red2:
    build: 
      context: ./client
      dockerfile: Dockerfile_client
    entrypoint: entrypoints/ep_red2.sh
    #privedges for network needed to add a new ip route
    cap_add:
      - NET_ADMIN
    depends_on:
      - rc_router
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      RCnet_right1:
        ipv4_address: 10.0.2.20
  red3:
    build: 
      context: ./client
      dockerfile: Dockerfile_client
    entrypoint: entrypoints/ep_red3.sh

    #privedges for network needed to add a new ip route
    cap_add:
      - NET_ADMIN
    depends_on:
      - rd_router
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      RDnet_left1:
        ipv4_address: 10.0.3.20
  red4:
    build: 
      context: ./client
      dockerfile: Dockerfile_client
    entrypoint: entrypoints/ep_red4.sh 
    #privedges for network needed to add a new ip route
    cap_add:
      - NET_ADMIN
    depends_on:
      - rd_router
    #put the container in a loop in order to access it with bash
    command: 
      - "/bin/sleep"
      - "infinity"  
    networks:
      RDnet_right1:
        ipv4_address: 10.0.4.20
  
networks:
  professor-system1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.200.0.0/24
  servidor-system1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.100.0.0/24
  RA-RB1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/24
  RB-RC_left1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.2.0.0/24
  RB-RD_right1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.3.0.0/24
  RCnet_left1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.1.0/24
  RCnet_right1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.2.0/24
  RDnet_left1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.3.0/24
  RDnet_right1:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.4.0/24
